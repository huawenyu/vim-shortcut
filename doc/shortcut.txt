*shortcut.vim*   Discoverable shortcut system for Vim, inspired by Spacemacs.

Author:   Suraj N. Kurapati <github.com/sunaku>
License:  Same terms as Vim itself (see |license|)
Homepage: https://github.com/sunaku/vim-shortcut

------------------------------------------------------------------------------
INTRODUCTION                                                  *shortcut-intro*
------------------------------------------------------------------------------

This plugin provides a discoverable shortcut system for Vim that is inspired
by Emacs' Spacemacs http://spacemacs.org plugin and powered by Vim's |fzf-vim|
https://github.com/junegunn/fzf.vim plugin.  It displays a searchable menu of
shortcuts when you pause partway while typing a shortcut, say, because you
forgot the rest of it or because you just want to see the shortcut menu again
to discover what else is available.  You can interactively filter the menu by
typing more shortcut keys or parts of shortcut descriptions shown in the menu.

------------------------------------------------------------------------------
USAGE                                                         *shortcut-usage*
------------------------------------------------------------------------------

* Use the |:Shortcut!| prefix (with a bang) to describe existing shortcuts.

* Use the |:Shortcut| prefix (without a bang) to define brand new shortcuts.

* Use the |:Shortcuts| command to display a searchable menu of shortcuts.

* Use the |g:shortcuts| variable to access shortcuts keys and descriptions.

------------------------------------------------------------------------------
SETUP                                                         *shortcut-setup*
------------------------------------------------------------------------------

I recommend that you define these two shortcuts for discovery and fallback
(feel free to change the "<Leader>" key to your own commonly used prefix):
>
	Shortcut show shortcut menu and run chosen shortcut
		\ noremap <silent> <Leader><Leader> :Shortcuts<Return>

	Shortcut fallback to shortcut menu on partial entry
		\ noremap <silent> <Leader> :Shortcuts<Return>

The fallback shortcut's keys should represent the common prefix used by most
of your shortcuts so that it can automatically launch the shortcut menu for
you when you pause partway while typing a shortcut, say, because you forgot
the rest of it or because you just want to see the shortcut menu again to
discover what else is available.  However, this is not a strict requirement
because you might find it useful to map shortcuts with uncommon prefixes when
you know them by heart and you thereby feel that a fallback is unnecessary.
As a result, you can map any keys to any shortcut, regardless of the prefix!
Furthermore, you can set up multiple fallback shortcuts too, one per prefix.

------------------------------------------------------------------------------
VARIABLES                                                       *shortcut-var*
------------------------------------------------------------------------------

g:shortcuts							*g:shortcuts*
		Dictionary that maps a shortcut's {keys} to its {description}.

------------------------------------------------------------------------------
COMMANDS                                                        *shortcut-cmd*
------------------------------------------------------------------------------

:Shortcuts!							*:Shortcuts!*
		Same as |:Shortcuts| except that the menu is shown fullscreen.

:Shortcuts							*:Shortcuts*
		Display a |fzf-vim| menu of shortcuts described in |g:shortcuts|.
		When an item is chosen from the menu, its shortcut {keys} are
		synthetically replayed (as if you typed them) via |feedkeys()|.

:Shortcut! {keys} {description}					*:Shortcut!*
		Associate an existing shortcut's {keys} to its {description}
		in the |g:shortcuts| dictionary.  Extra whitespace is ignored.

		For real-life examples, take a look at this file in my |vimrc|:
		https://github.com/sunaku/.vim/blob/dvorak/bundle/motion/unimpaired.vim
>
		Shortcut! [f  go to previous file in current file's directory
		Shortcut! ]f  go to next     file in current file's directory

:Shortcut {description} {|:map-commands|}			*:Shortcut*
		Define a new shortcut by first executing {|:map-commands|} and
		then associating the resulting shortcut to its {description}
		in the |g:shortcuts| dictionary.  Extra whitespace is ignored.

		For example, consider any |key-mapping| that takes this form:
>
		map definition
<
		Now simply prefix the |:Shortcut| command and a {description}:
>
		Shortcut description map definition
<
		Note that you can split this construct onto multiple lines:
>
		Shortcut description
			\ map definition
<
		For real-life examples, take a look at this file in my |vimrc|:
		https://github.com/sunaku/.vim/blob/dvorak/plugin/format.vim
>
		Shortcut duplicate before cursor and then comment-out
			\ map <Space>cP  <Plug>NERDCommenterYank`[P

		Shortcut fzf files in directory and go to chosen file
			\ nnoremap <silent> <Space>ef :Files<Return>

		Shortcut save file as...
			\ nnoremap <silent> <Space>yf :call feedkeys(":saveas %\t", "t")<Return>

		for i in range(1,9)
			execute 'Shortcut go to tab number '. i .' '
				\ 'nnoremap <silent> <Space>'. i .'t :tabfirst<Bar>'. i .'tabnext<Return>'
		endfor

		Shortcut comment-out using FIGlet ASCII art decoration
			\ nnoremap <silent> <Space>c@ V:call CommentUsingFIGlet()<Return>
			\|vnoremap <silent> <Space>c@ :<C-U>call CommentUsingFIGlet()<Return>

		function! CommentUsingFIGlet()
			" ...
		endfunction
<

 vim:tw=78:ts=8:ft=help:norl:
